---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DeployVersion:
    Type: String
Resources:
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName} API"
      Description: !Sub "Swagger Configuration version ${DeployVersion}"
      BodyS3Location:
        Bucket: !Sub "${AWS::StackName}-deploy"
        Key: api-swagger.yaml
      FailOnWarnings: false
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Account:
    Type: AWS::ApiGateway::Account
    DependsOn: CloudWatchRole
    Properties:
      CloudWatchRoleArn: !GetAtt [CloudWatchRole, Arn]
  ProdStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref ProdDeployment
      RestApiId: !Ref Api
      StageName: prod
      Variables:
        lambda: !Ref LambdaFunction
      MethodSettings:
        -
          ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO

  ProdDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      Description: !Sub "version ${DeployVersion}"
      RestApiId: !Ref Api
      # StageDescription: StageDescription
      # StageName: String

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn: LambdaExecutionRole
    Properties:
      Code:
        S3Bucket: !Sub "${AWS::StackName}-deploy"
        S3Key: !Sub "lambda-${DeployVersion}.zip"
      Description: !Sub "${AWS::StackName} Lambda Function version ${DeployVersion}"
      FunctionName: !Sub "${AWS::StackName}-lambda"
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Runtime: nodejs4.3
      Timeout: 10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-lambda-execution-policy"
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ApiUrl:
    Description: The URL of the API Gateway RestApi
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"
